/*pure javascript keyboard function that reads and displays keycodes **/

var userAgent =  window.navigator.userAgent;
var body = document.getElementsByTagName("body")[0];
var IEver = getInternetExplorerVersion();

/** function to get IE versions this is good to replace  the $.(browser) Jquery function  that is absent on jquery 1.9 **/
function getInternetExplorerVersion()
// Returns the version of Windows Internet Explorer or a -1
// (indicating the use of another browser).
{
   var rv = -1; // Return value assumes failure.
   if (navigator.appName == 'Microsoft Internet Explorer')
   {
      var ua = navigator.userAgent;
      var re  = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
      if (re.exec(ua) != null)
         rv = parseFloat( RegExp.$1 );
   }
   return rv;
}

/* browser detection condition if IE or other browsers */
if (/MSIE (\d+\.\d+);/.test(userAgent)){ 
   if (IEver < 9){
       ErrorCanvasSupport();
        } 
      if (IEver >= 9){
             document.addEventListener("DOMContentLoaded", main, false);
      }
         }else{
             if(isCanvasSupported()){
                
                  document.addEventListener("DOMContentLoaded", main, false);
             }else{
              ErrorCanvasSupport();
             }
}

function isCanvasSupported(){
     var canvas = document.getElementById("gameframe");
     return !!(canvas.getContext && canvas.getContext("2d"));
}

function main(){   
    var canvas = document.getElementById("gameframe");
    var context = canvas.getContext("2d");

    var score = 0;    
    var colorBlack = "#000", colorWhite = "#fff", colorPurple = "purple", colorOrange = "orange", colorPink = "pink", colorCyan ="cyan",
    colorRed = "red", colorGreen = "green",colorBlue = "blue";// Color variables
    var bricksPerRow = 10;    // obvious number of bricks to fill per row                           
    var brickHeight = 20; // height of bricks
    var brickWidth = canvas.width/bricksPerRow; // fitting bricks evenly to the width of the canvas.
    var ballX, ballY, ballRadius = 10; // ball variables
    var paddleX = 200, paddleY = 540, paddleWidth = 100,  paddleHeight = 15, paddleDeltaX = 0, paddleDeltaY = 0, paddleSpeedX = 10; // paddle variables
    var paddleMove; 
    var gameLoop ;
    var ballDeltaX; 
    var ballDeltaY; 

    var bricks = [[2,3,1,3,1,1,1,2,3,3],[1,1,3,1,4,1,1,1,2,1],[2,1,2,1,2,1,4,1,3,3],[1,2,1,1,4,3,1,1,3,3]];

  
    // assigning sound varaibles
    var bouncingSound = new Audio("sounds/collision.ogg");
    var breakingSound = new Audio("sounds/explosion.ogg");

    if (/MSIE (\d+\.\d+);/.test(userAgent)){                      
          if (IEver < 9){
           alert(IEver);
           document.attachEvent("onkeydown",getKeystrokeIE,true);
            }else{                    
                startGame(); 
                window.addEventListener("keydown",getKeystroke, true); }
        }else{  
                window.addEventListener("keydown",getKeystroke, true);    
                startGame();      
       }
    
    
function drawPaddle(){
    var paddleImg = new Image();
    paddleImg.src = "images/paddle.png";
    //context.lineWidth = 30;
    //context.fillStyle = colorPurple;
  //  context.fillRect(paddleX,paddleY,paddleWidth,paddleHeight);
    context.drawImage(paddleImg,paddleX,paddleY);

}

function drawBall(){
      var ballImg = new Image();
      ballImg.src = "images/ball.png";
   // draw ball with orange fill

    //context.fillStyle = colorOrange; 
    //context.fill();    
    context.beginPath(); 
   // context.arc(ballX,ballY,ballRadius,0,Math.PI*2,true); 
  // draw a circle with arc method
    //context.stroke();
    context.drawImage(ballImg,ballX - Math.PI*3.12, ballY - Math.PI*3.12);
    //console.log(Math.PI*3.12);
}

// draw a single brick
function drawBrick(brickX,brickY,brickType){   
    switch(brickType){ // if brick is still visible; three colors for three types of bricks
        case 1:
            context.fillStyle = colorCyan;            
            break;
        case 2:
            context.fillStyle = colorPink;                     
            break;
        case 3: context.fillStyle = colorRed;
            break;
        case 4: context.fillStyle = colorWhite;
            break;
        default:
            context.clearRect(brickX*brickWidth,brickY*brickHeight,brickWidth,brickHeight);
            break; 
    }
    
    if (brickType){
        //Draw rectangle with fillStyle color selected earlier
       context.strokeRect(brickX*brickWidth,brickY*brickHeight,brickWidth,brickHeight);
        context.lineWidth = 1;
        context.fillRect(brickX*brickWidth,brickY*brickHeight,brickWidth,brickHeight);
      
    } 
}
 
// iterate through the bricks array and draw each brick using drawBrick()
function createBricks(){
    for (var i=0; i < bricks.length; i++) {
        for (var j=0; j < bricks[i].length; j++) {
            drawBrick(j,i,bricks[i][j]);
        }
    }
}
 
// function for showing a score board.
function showScoreBoard(){
    //Set the text font and color
    context.fillStyle = colorGreen;
    context.font = "20px Arial";     
    //Clear the bottom 30 pixels of the canvas
    context.clearRect(0,canvas.height-30,canvas.width,30);  
    // Write Text 5 pixels from the bottom of the canvas
    context.fillText('Score: '+score, canvas.width/2 - 30 , canvas.height - 15);
}

function moveBall(){
    if (ballY + ballDeltaY - ballRadius < 0 || collisionYWithBricks()){
    ballDeltaY = -ballDeltaY;
       bouncingSound.play();
    }

    // If the bottom of the ball touches the bottom of the screen then end the game
   if (ballY + ballDeltaY + ballRadius >= canvas.height){
        endGame();
   }
					// If side of ball touches either side of the wall then reverse X direction
						//left of ball moves too far left
   if ((ballX + ballDeltaX - ballRadius < 0) || (ballX + ballDeltaX + ballRadius > canvas.width)|| collisionXWithBricks()){  
	 ballDeltaX = -ballDeltaX;
            bouncingSound.play();
   }

					// if bottom of ball reaches the top of paddle,
    if (ballY + ballDeltaY + ballRadius >= paddleY){
						// and it is positioned between the two ends of the paddle (is on top)
    if (ballX + ballDeltaX >= paddleX && ballX + ballDeltaX <= paddleX + paddleWidth){
            ballDeltaY = - ballDeltaY;
            bouncingSound.play();
            }
	} else if (ballY + ballDeltaY + ballRadius <= paddleDeltaY){
        if (ballX + ballDeltaX >= paddleX && ballX + ballDeltaX <= paddleX + paddleWidth){
            ballDeltaY = + ballDeltaY;
            bouncingSound.play();
            }
        }
         // Move the ball
        ballX = ballX + ballDeltaX;
        ballY = ballY + ballDeltaY;
}
 
    function movePaddle(){
        if (paddleMove == 'LEFT'){
            paddleDeltaX = -paddleSpeedX;
            } else if (paddleMove == 'RIGHT'){
                paddleDeltaX = paddleSpeedX;
                } else {
            paddleDeltaX = 0;
            }
           // If paddle reaches the ends, then don't let it move 
            if (paddleX + paddleDeltaX < 0 || paddleX + paddleDeltaX +paddleWidth >canvas.width){
            paddleDeltaX = 0; 
            }
            paddleX = paddleX + paddleDeltaX;
    }
    
    
    function collisionXWithBricks(){
    var bumpedX = false;    
    for (var i=0; i < bricks.length; i++) {
        for (var j=0; j < bricks[i].length; j++) {
            if (bricks[i][j]){ // if brick is still visible
                var brickX = j * brickWidth;
                var brickY = i * brickHeight;
                if (
                    // barely touching from left
                    ((ballX + ballDeltaX + ballRadius >= brickX) &&
                    (ballX + ballRadius <= brickX))
                    ||
                    // barely touching from right
                    ((ballX + ballDeltaX - ballRadius<= brickX + brickWidth)&&
                    (ballX - ballRadius >= brickX + brickWidth))
                    ){      
                    if ((ballY + ballDeltaY -ballRadius<= brickY + brickHeight) &&
                        (ballY + ballDeltaY + ballRadius >= brickY)){                                                    
                        // weaken brick and increase score
                        explodeBrick(i,j);
                        bumpedX = true;
                    }
                }
            }
        }
    }
   return bumpedX;
}

    function collisionYWithBricks(){
    var bumpedY = false;
    for (var i=0; i < bricks.length; i++) {
        for (var j=0; j < bricks[i].length; j++) {
            if (bricks[i][j]){ // if brick is still visible
                var brickX = j * brickWidth;
                var brickY = i * brickHeight;
                if (
                    // barely touching from below
                    ((ballY + ballDeltaY - ballRadius <= brickY + brickHeight) && 
                    (ballY - ballRadius >= brickY + brickHeight))
                    ||
                    // barely touching from above
                    ((ballY + ballDeltaY + ballRadius >= brickY) &&
                    (ballY + ballRadius <= brickY ))){
                    if (ballX + ballDeltaX + ballRadius >= brickX && 
                        ballX + ballDeltaX - ballRadius<= brickX + brickWidth){                                      
                        // weaken brick and increase score
                        explodeBrick(i,j);                          
                        bumpedY = true;
                    }                       
                }
            }
        }
    }
    return bumpedY;
}
 
function explodeBrick(i,j){
    // First weaken the brick (0 means brick has gone)
    bricks[i][j] --;
 
    if (bricks[i][j]>0){ 
        // The brick is weakened but still around. Give a single point.
        score++;
    } else {
        // give player an extra point when the brick disappears
        score += 2;   
       breakingSound.play();
    }
    
  //  console.log(bricks[i][j])
}

    function framerate() {
  
        context.clearRect(0,0,canvas.width,canvas.height);     
        createBricks();
        showScoreBoard();
        drawBall();  
        moveBall(); 
        movePaddle();
        drawPaddle();
        
    }

    function startGame(){
    clearInterval(gameLoop); // prevents framerate from accumilating when function is executed again from playagain button
    ballX = Math.floor((Math.random()*500) + 200), ballY = Math.floor((Math.random()* 400) + 200);  // put the ball in random position again
    console.log(ballX,ballY)
    score = 0; 
    ballDeltaY = -4;
    ballDeltaX = -2;
    paddleMove = 'NONE';
    paddleDeltaX = 0;
    gameLoop = setInterval(framerate,10);
    }

    function endGame(){
            clearInterval(gameLoop);         
            context.fillStyle = colorBlue;
            context.fillText('Game Over!', canvas.width/2 - 50, canvas.height/2); 
            replayButton();
           
    }
    
    function replayButton(){
     var buttonX = canvas.width/2 - 42,
     buttonY = canvas.height/2 + 130;
       elemLeft = canvas.offsetLeft,
       elemTop = canvas.offsetTop;
       elements = [];
       elements.push({
           width:100,
           height:30,
           top:buttonY,
           left:buttonX 
       })
      
   
       
       canvas.addEventListener('click', function(e) {
       var x = e.pageX - elemLeft,
       y = e.pageY - elemTop;
 
      
    // Collision detection between clicked offset and element.
         elements.forEach(function(element) {
        if (y > element.top && y < element.top + element.height && x > element.left && x < element.left + element.width) {
       
            startGame();
  
            }
        });
        }, false);
     
            elements.forEach(function(element) { 
                context.fillRect(element.left, element.top, element.width, element.height);
                context.fillStyle = colorWhite;
                context.font = "16px Arial";  
                context.fillText("Play Again?",element.left + 10,element.top + 20);
            });
}
          
        
    function getKeystroke(e){
        document.onkeydown = function(e){ 
        var theKey = e.keyCode;
        switch (theKey){
            case 65 : movePaddle(paddleMove = "LEFT");
                break;
            case 68 : movePaddle(paddleMove = "RIGHT");
                break;  
            default : movePaddle(paddleMove = "NONE") ; 
            }  

        }

    
     document.onkeyup = function(e){ 
        var theKey = e.keyCode;
        switch (theKey){
            case 65 : movePaddle(paddleMove = "NONE");
                break;
            case 68 : movePaddle(paddleMove = "NONE");
                break;  
            default : movePaddle(paddleMove = "NONE") ; 
            }  

        }
      }
}

function ErrorCanvasSupport(){
    
    alert ("Your browser doesn't support canvas!")
    
}